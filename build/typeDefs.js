"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_1 = require("apollo-server");
exports.typeDefs = apollo_server_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type Event {\n    id: Int\n    title: String\n    description: String\n    maxPeopleCount: Int\n    leaveDate: String\n    returnDate: String\n    meetingPlace: Location\n    destiny: Location\n    user: User\n    members: [User]\n    createdAt: String\n    updatedAt: String\n  }\n\n  type User {\n    id: Int!\n    firstName: String!\n    lastName: String\n    email: String!\n    createdAt: String!\n    updatedAt: String!\n    events: [Event]\n  }\n\n  type Location {\n    id: Int\n    zipcode: String\n    street: String\n    number: Int\n    city: String\n    state: String\n    country: String\n    district: String\n    createdAt: String\n    updatedAt: String\n  }\n\n  type Token {\n    token: String\n  }\n\n  type Query {\n    me: User\n\n    # Location\n    location(id: Int!): Location\n\n    # Event\n    events: [Event]\n  }\n\n  type Mutation {\n    # User\n    signUp(input: SignUpInput): SignUpResponse\n    login(input: LoginInput): LoginResponse\n\n    # Location\n    createLocation(input: CreateLocationInput): CreateLocationResponse\n\n    # Event\n    createEvent(input: CreateEventInput): CreateEventResponse\n  }\n\n  # Inputs\n  input SignUpInput {\n    firstName: String!\n    lastName: String\n    email: String!\n    password: String!\n  }\n\n  input LoginInput {\n    email: String!\n    password: String!\n  }\n\n  input CreateLocationInput {\n    zipcode: String\n    street: String\n    number: Int\n    city: String\n    state: String\n    country: String\n    district: String\n  }\n\n  input CreateEventInput {\n    title: String!\n    description: String\n    maxPeopleCount: Int!\n    leaveDate: String!\n    returnDate: String!\n    meetingPlaceID: Int!\n    destinyID: Int!\n    membersIDs: [Int]\n  }\n\n  # Responses\n  interface MutationResponse {\n    success: Boolean!\n    message: String!\n  }\n\n  type SignUpResponse implements MutationResponse {\n    success: Boolean!\n    message: String!\n    data: User\n  }\n\n  type LoginResponse implements MutationResponse {\n    success: Boolean!\n    message: String!\n    data: Token\n  }\n\n  type CreateLocationResponse implements MutationResponse {\n    success: Boolean!\n    message: String!\n    data: Location\n  }\n\n  type CreateEventResponse implements MutationResponse {\n    success: Boolean!\n    message: String!\n    data: Event\n  }\n"], ["\n  type Event {\n    id: Int\n    title: String\n    description: String\n    maxPeopleCount: Int\n    leaveDate: String\n    returnDate: String\n    meetingPlace: Location\n    destiny: Location\n    user: User\n    members: [User]\n    createdAt: String\n    updatedAt: String\n  }\n\n  type User {\n    id: Int!\n    firstName: String!\n    lastName: String\n    email: String!\n    createdAt: String!\n    updatedAt: String!\n    events: [Event]\n  }\n\n  type Location {\n    id: Int\n    zipcode: String\n    street: String\n    number: Int\n    city: String\n    state: String\n    country: String\n    district: String\n    createdAt: String\n    updatedAt: String\n  }\n\n  type Token {\n    token: String\n  }\n\n  type Query {\n    me: User\n\n    # Location\n    location(id: Int!): Location\n\n    # Event\n    events: [Event]\n  }\n\n  type Mutation {\n    # User\n    signUp(input: SignUpInput): SignUpResponse\n    login(input: LoginInput): LoginResponse\n\n    # Location\n    createLocation(input: CreateLocationInput): CreateLocationResponse\n\n    # Event\n    createEvent(input: CreateEventInput): CreateEventResponse\n  }\n\n  # Inputs\n  input SignUpInput {\n    firstName: String!\n    lastName: String\n    email: String!\n    password: String!\n  }\n\n  input LoginInput {\n    email: String!\n    password: String!\n  }\n\n  input CreateLocationInput {\n    zipcode: String\n    street: String\n    number: Int\n    city: String\n    state: String\n    country: String\n    district: String\n  }\n\n  input CreateEventInput {\n    title: String!\n    description: String\n    maxPeopleCount: Int!\n    leaveDate: String!\n    returnDate: String!\n    meetingPlaceID: Int!\n    destinyID: Int!\n    membersIDs: [Int]\n  }\n\n  # Responses\n  interface MutationResponse {\n    success: Boolean!\n    message: String!\n  }\n\n  type SignUpResponse implements MutationResponse {\n    success: Boolean!\n    message: String!\n    data: User\n  }\n\n  type LoginResponse implements MutationResponse {\n    success: Boolean!\n    message: String!\n    data: Token\n  }\n\n  type CreateLocationResponse implements MutationResponse {\n    success: Boolean!\n    message: String!\n    data: Location\n  }\n\n  type CreateEventResponse implements MutationResponse {\n    success: Boolean!\n    message: String!\n    data: Event\n  }\n"])));
var templateObject_1;
